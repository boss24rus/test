unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, ControllersUnit,
  System.Generics.Collections, MenuUnit, MainUnit, Test1Unit, TestsUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
    FPhisicsController: Controllers;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetListAnswer;
    procedure TestgetQuestCaption;
    procedure TestsetTest;
    procedure TestGetMenu;
  end;

implementation

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
end;

procedure TestPhisicsController.TearDown;
begin
  // FPhisicsController.Free;
  FPhisicsController := nil;
end;

procedure TestPhisicsController.TestgetListAnswer;
var
  ReturnValue: Tlist<string>;
begin
  FPhisicsController.setTest('Движение с постоянным ускорением');
  ReturnValue := FPhisicsController.getAnswer;
  CheckEquals(ReturnValue.Items[1],
    'это координата, которую имеет МТ в данный момент времени');
  CheckNotEquals(ReturnValue.Items[0], 'yyyyyyyyyyy');
  CheckEquals(ReturnValue.Items[2],
    'радиус-вектор МЕХАНИЧЕСКОЕ ДВИЖЕНИЕ есть изменение положения тела в пространстве');
  CheckEquals(ReturnValue.Count, 10);
  CheckNotEquals(ReturnValue.Count, 2);
end;

procedure TestPhisicsController.TestGetMenu;
var
   ReturnValue: Tlist<string>;
begin
   ReturnValue := FPhisicsController.getMenu;
  CheckEquals(ReturnValue.Items[0],
    'Движение с постоянным ускорением');
  CheckNotEquals(ReturnValue.Items[0], 'yyyyyyyyyyy');
  CheckEquals(ReturnValue.Count,1);
end;

procedure TestPhisicsController.TestgetQuestCaption;
  var
  ReturnValue: Tlist<string>;
begin
  FPhisicsController.setTest('Движение с постоянным ускорением');
  ReturnValue := FPhisicsController.getQuest;
  CheckEquals(ReturnValue.Items[8],
    'Что такое закон движения?');
  CheckNotEquals(ReturnValue.Items[8], 'yyyyyyyyyyy');
end;

procedure TestPhisicsController.TestsetTest;
var
  caption: string;
  ReturnValue1: Tlist<string>;
begin
  caption := 'Движение с постоянным ускорением';
  FPhisicsController.setTest(caption);
  ReturnValue1 := FPhisicsController.getQuest;
  CheckEquals(ReturnValue1.Items[1],
    'Как определяется положение материальной точки?');
  CheckNotEquals(ReturnValue1.Items[0], 'yyyyyyyyyyy');
  CheckEquals(ReturnValue1.Items[2],
    'Что такое декартова система координат?');
  CheckEquals(ReturnValue1.Count, 10);
  CheckNotEquals(ReturnValue1.Count, 2);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestPhisicsController.Suite);

end.
