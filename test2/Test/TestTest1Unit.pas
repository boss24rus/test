unit TestTest1Unit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, AdaptersUnit, System.Generics.Collections, Test1Unit, TestsUnit,
  AccessAdapterUnit;

type
  // Test methods for class Test1

  TestTest1 = class(TTestCase)
  strict private
    Fest1: Test1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestsetTest;
    procedure TestgetQuest;
    procedure TestgetAnswer;
    procedure TestgetCorrect;
  end;

implementation

procedure TestTest1.SetUp;
begin
  Fest1 := Test1.Create;
end;

procedure TestTest1.TearDown;
begin
  Fest1.Free;
  Fest1 := nil;
end;

procedure TestTest1.TestsetTest;
var
  caption: string;
  ReturnValue1: Tlist<string>;
begin
  caption := 'Движение с постоянным ускорением';
  Fest1.setTest(caption);
  ReturnValue1 := Fest1.getQuest;
  CheckEquals(ReturnValue1.Items[1],
    'Как определяется положение материальной точки?');
  CheckNotEquals(ReturnValue1.Items[0], 'yyyyyyyyyyy');
  CheckEquals(ReturnValue1.Items[2],
    'Что такое декартова система координат?');
  CheckEquals(ReturnValue1.Count, 10);
  CheckNotEquals(ReturnValue1.Count, 2);
end;

procedure TestTest1.TestgetQuest;
var
  ReturnValue: Tlist<string>;
begin
  Fest1.setTest('Движение с постоянным ускорением');
  ReturnValue := Fest1.getQuest;
  CheckEquals(ReturnValue.Items[8],
    'Что такое закон движения?');
  CheckNotEquals(ReturnValue.Items[8], 'yyyyyyyyyyy');
end;

procedure TestTest1.TestgetAnswer;
var
  ReturnValue: Tlist<string>;
begin
  Fest1.setTest('Движение с постоянным ускорением');
  ReturnValue := Fest1.getAnswer;
  CheckEquals(ReturnValue.Items[1],
    'это координата, которую имеет МТ в данный момент времени');
  CheckNotEquals(ReturnValue.Items[0], 'yyyyyyyyyyy');
  CheckEquals(ReturnValue.Items[2],
    'радиус-вектор МЕХАНИЧЕСКОЕ ДВИЖЕНИЕ есть изменение положения тела в пространстве');
  CheckEquals(ReturnValue.Count, 10);
  CheckNotEquals(ReturnValue.Count, 2);
end;

procedure TestTest1.TestgetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  Fest1.setTest('Движение с постоянным ускорением');
  ReturnValue := Fest1.getCorrect;
  CheckEquals(ReturnValue.Items[1],1);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTest1.Suite);
end.

